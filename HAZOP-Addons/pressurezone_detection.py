import networkx as nxdef plot_graph(nx_graph):    import networkx as nx    import matplotlib.pyplot as plt    graph=nx_graph    color=[]    width=[]    node_group=nx.get_node_attributes(graph, 'node_group')    edge_class=nx.get_edge_attributes(graph, 'edge_class')    edge_sub_class=nx.get_edge_attributes(graph, 'edge_sub_class')      dict_group_color={"Vessel":'red', 'Column':'red', 'Pipe tee':'grey', 'Valves':'grey', 'Fittings':'grey', 'Pump':'blue',                'Filter':'yellow', 'Heat exchanger':'orange', 'Connector':'brown', 'MSR':'green'}        #color of nodes       for node in graph.nodes():        Found='No'        for group in dict_group_color:                        if node_group[node]==group:                color.append(dict_group_color[group])                Found='Yes'        if Found=='No':            color.append('white')      #width of the connections           for edge in graph.edges():            if edge_class[edge] in ['Signal line', 'Process connection line']:                width.append(1)            elif edge_class[edge]=='Piping' and edge_sub_class[edge]=='Main pipe':                width.append(1)            elif edge_class[edge]=='Piping' and edge_sub_class[edge]=='Secondary pipe':                width.append(1)            elif edge_class[edge]=='Heat transfer medium':                width.append(1)                       else:                width.append(10)          #plot_graph = plt.figure(figsize=(15,10))#leeres Bild erzeugt, worauf gleich gezeichnet wird    nx.draw_kamada_kawai(graph, node_color=color, node_size=150, font_size=10, width=width, arrowsize=15, with_labels=True)    def plot_graph2(nx_graph):    import networkx as nx    import matplotlib.pyplot as plt    graph=nx_graph    color=[]    width=[]    node_sizes=[]    pos={}    node_group=nx.get_node_attributes(graph, 'node_group')    edge_class=nx.get_edge_attributes(graph, 'edge_class')    edge_sub_class=nx.get_edge_attributes(graph, 'edge_sub_class')      dict_group_color={"Vessel":'orange', 'Column':'orange', 'Pipe tee':'grey', 'Valves':'grey', 'Fittings':'grey', 'Pump':'blue',                'Filter':'yellow', 'Heat exchanger':'red', 'Connector':'brown', 'MSR':'green'}        #color of nodes       for node in graph.nodes():        Found='No'        for group in dict_group_color:                        if node_group[node]==group:                color.append(dict_group_color[group])                Found='Yes'        if Found=='No':            color.append('white')                    if node_group[node] in ['Filter', 'Vessel', 'Column', 'Pump','Heat exchanger', '...']:            node_sizes.append(2000)        else:            node_sizes.append(500)                 pos[node]=(float(graph.nodes[node]['node_x']), float(graph.nodes[node]['node_y']))      #width of the connections       for edge in graph.edges():        if edge_class[edge] in ['Signal line', 'Process connection line']:            width.append(1)        elif edge_class[edge]=='Piping' and edge_sub_class[edge]=='Main pipe':            width.append(1)        elif edge_class[edge]=='Piping' and edge_sub_class[edge]=='Secondary pipe':            width.append(1)        elif edge_class[edge]=='Heat transfer medium':            width.append(1)                   else:            width.append(10)                                                     ##alpha=1,    plot_graph = plt.figure(figsize=(40,20))#leeres Bild erzeugt, worauf gleich gezeichnet wird    #pos=nx.spring_layout(graph, k=3/math.sqrt(graph.order()))    nx.draw(graph, pos=pos, node_color=color, node_shape='o', node_size=node_sizes, edgecolors='none', font_size=10, width=width, edge_color='grey', arrowsize=20, with_labels=True, font_weight='bold')    g = nx.read_graphml('./data/Graph_HAZOP')nx.draw_kamada_kawai(g, with_labels=True)'''for node in g.nodes:    print(g._node[node]['P_max_design'])'''# Pfad zwischen 